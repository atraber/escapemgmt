load("@npm//@bazel/concatjs:index.bzl", "karma_web_test", "karma_web_test_suite")
load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_image",
    "container_push",
)
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")

package(default_visibility = ["//visibility:public"])

# ts_library and ng_module use the `//:tsconfig.json` target
# by default. This alias allows omitting explicit tsconfig
# attribute.
alias(
    name = "tsconfig.json",
    actual = "//src:tsconfig.json",
)

alias(
    name = "frontend_dev",
    actual = "//src:devserver",
)

container_image(
    name = "frontend_image",
    base = "@frontend_base//image",
    cmd = [
        "nginx",
        "-g",
        "daemon off;",
    ],
    env = {
        "API_ADDR": "http://escape-backend:8080",
    },
    files = [
        ":default.conf",
        "//src:prodapp",
    ],
    symlinks = {
        "/etc/nginx/conf.d/default.conf": "/default.conf",
    },
)

container_push(
    name = "frontend_push",
    format = "Docker",
    image = ":frontend_image",
    registry = "192.168.0.80:5000",
    repository = "escape_frontend",
    tag = "prod",
)

container_push(
    name = "frontend_canary_push",
    format = "Docker",
    image = ":frontend_image",
    registry = "192.168.0.80:5000",
    repository = "escape_frontend",
    tag = "canary",
)

# Custom ts_library compiler that runs tsc_wrapped with angular/compiler-cli statically linked
# This can be used with worker mode because we don't need the linker at runtime to make
# the angular plugin loadable
# Just a clone of @npm//@bazel/typescript/bin:tsc_wrapped with added deps
nodejs_binary(
    name = "tsc_wrapped_with_angular",
    data = [
        "@npm//@angular/compiler-cli",
        "@npm//@bazel/typescript",
    ],
    entry_point = "@npm//:node_modules/@bazel/typescript/internal/tsc_wrapped/tsc_wrapped.js",
    visibility = ["//:__subpackages__"],
)
